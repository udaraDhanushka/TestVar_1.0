generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int               @id @default(autoincrement())
  first_name  String
  last_name   String
  email       String            @unique
  password    String
  role        String // Example: 'student' or 'admin'
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  collections Collection[]
  flashcards  Flashcard[]
  ratings     Rating[]
  sessions    Session[]
  hiddenCards HiddenFlashcard[]
  FlashcardSet FlashcardSet[]
}

model Collection {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  createdBy     Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  creator       User           @relation(fields: [createdBy], references: [id])
  flashcardSets FlashcardSet[]
}

model FlashcardSet {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  collectionId Int
  createdBy    Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collection   Collection  @relation(fields: [collectionId], references: [id])
  creator      User        @relation(fields: [createdBy], references: [id])
  flashcards   Flashcard[]
}

model Flashcard {
  id              Int               @id @default(autoincrement())
  question        String
  answer          String
  tags            String[]
  publishedStatus Boolean           @default(false)
  flashcardSetId  Int
  createdBy       Int
  createdAt       DateTime          @default(now())
  flashcardSet    FlashcardSet      @relation(fields: [flashcardSetId], references: [id])
  creator         User              @relation(fields: [createdBy], references: [id])
  ratings         Rating[]
  hiddenCards     HiddenFlashcard[]
}

model Rating {
  id          Int       @id @default(autoincrement())
  userId      Int
  flashcardId Int
  rating      Int
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])

  @@unique([userId, flashcardId])
}

model HiddenFlashcard {
  id          Int       @id @default(autoincrement())
  userId      Int
  flashcardId Int
  hiddenAt    DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
}

model Session {
  id        Int       @id @default(autoincrement())
  userId    Int
  startTime DateTime
  endTime   DateTime?
  result    Json
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model Setting {
  id           Int      @id @default(autoincrement())
  settingKey   String   @unique
  settingValue String
  updatedAt    DateTime @updatedAt
}